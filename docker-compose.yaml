services:
  minio:
    image: minio/minio:RELEASE.2023-01-02T09-40-09Z
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniotest
    command: server --console-address ":9001" /data

  createbucket:
    image: minio/mc:RELEASE.2022-12-24T15-21-38Z
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 minio miniotest;
      /usr/bin/mc mb myminio/epp;
      /usr/bin/mc mb myminio/biorxiv;
      exit 0;
      "

  temporal:
    build:
      context: .
      dockerfile: Dockerfile.temporal
    command:
    - "/temporal"
    - "server"
    - "start-dev"
    - "--namespace"
    - "default"
    - "--ip"
    - "0.0.0.0"
    - "--db-filename"
    - "/data/temporal.db"
    ports:
      - 7233:7233
      - 8233:8233
    volumes:
      - temporal_data:/data

  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    depends_on:
      - createbucket
      - temporal
    environment:
      EPP_SERVER_URI: http://api:3000
      TEMPORAL_SERVER: temporal:7233

      # EPP S3 bucket
      S3_ENDPOINT: http://minio:9000
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: miniotest
      BUCKET_NAME: epp

      # Meca S3 Bucket (on minio)
      MECA_S3_ENDPOINT: http://minio:9000
      MECA_AWS_ACCESS_KEY_ID: minio
      MECA_AWS_SECRET_ACCESS_KEY: miniotest
    restart: on-failure:5
    command:
      - yarn
      - start:worker:dev
    volumes:
      - ./src:/app/src

  # Downstream services for EPP
  ## Database (MongoDB) server
  mongodb:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: testtest
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb:27017/test -u admin -p testtest --authenticationDatabase admin --quiet
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 2s

  ## Database (MongoDB) GUI
  mongo-express:
    image: mongo-express
    environment:
      - ME_CONFIG_OPTIONS_EDITORTHEME=dracula
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_USERNAME=admin
      - ME_CONFIG_MONGODB_AUTH_PASSWORD=testtest
    depends_on:
      mongodb:
        condition: service_healthy
    ports:
      - "8081:8081"

  ## EPP API
  api:
    image: ghcr.io/elifesciences/enhanced-preprints:master-bc6c421f-20230628.1515
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'apk add curl; curl http://api:3000/'"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 2s
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      REPO_TYPE: MongoDB
      REPO_CONNECTION: mongodb:27017
      REPO_USERNAME: admin
      REPO_PASSWORD: testtest
    ports:
      - 3000:3000

  app:
    image: ghcr.io/elifesciences/enhanced-preprints-client:master-ae6f6d4a-20230624.0116
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'apk add curl; curl -X POST http://app:3000/'"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s
    environment:
      API_SERVER: http://api:3000
      NEXT_PUBLIC_IMAGE_SERVER: /iiif
      MANUSCRIPT_CONFIG_FILE: /opt/epp-client/data/manuscripts.json
      IS_AUTOMATED: true
    depends_on:
      api:
        condition: service_healthy
    ports:
      - 3001:3000

  ## Image Server
  image-server:
    image: ghcr.io/elifesciences/epp-image-server:master-32987c28-20230616.2129
    environment:
      SOURCE_STATIC: S3Source
      S3SOURCE_ENDPOINT: http://minio:9000/
      S3SOURCE_ACCESS_KEY_ID: minio
      S3SOURCE_SECRET_KEY: miniotest
      S3SOURCE_BASICLOOKUPSTRATEGY_PATH_PREFIX: /automation/
      S3SOURCE_BASICLOOKUPSTRATEGY_BUCKET_NAME: epp
    ports:
      - "8182:8182"
    healthcheck:
      test: curl http://image-server:8182/
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 2s

  ## Expose API, client and IIIF via proxy
  nginx:
    image: nginx:latest
    depends_on:
      api:
        condition: service_healthy
      app:
        condition: service_healthy
    ports:
      - 8080:80
    volumes:
      - ./.docker/nginx.conf:/etc/nginx/conf.d/default.conf

volumes:
  minio_storage: {}
  mongodb_data: {}
  temporal_data: {}
